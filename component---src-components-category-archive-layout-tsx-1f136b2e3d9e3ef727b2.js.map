{"version":3,"sources":["webpack:///./src/components/archiveLayout.tsx","webpack:///./src/components/categoryArchiveLayout.tsx","webpack:///./src/components/pageLayout.tsx"],"names":["ArchiveLayout","title","posts","data","allMdx","edges","postsGroupedByYear","reduce","reduced","node","frontmatter","year","Date","date","getFullYear","toString","push","Object","entries","reverse","map","index","posts2","Fragment","key","mdx","index2","Utils","SafeMetadataFromMdx","dateFormatted","url","className","to","displayName","CategoryArchiveLayout","category","pageContext","pageQuery","PageLayout","children","type","role","id"],"mappings":"8FAAA,6DAgBMA,EAA6D,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,MAC9DC,EADgF,EAAXC,KACxDC,OAAOC,MAE1B,IAAKH,EAAO,OAAO,KAEnB,IAAMI,EAAqBJ,EAAMK,QAA0B,SAACC,EAAD,GAAuB,IAAXC,EAAW,EAAXA,KAC7DC,EAAgBD,EAAhBC,YAER,GAAIA,EAAa,CACf,IAAMC,EAAO,IAAIC,KAAKF,EAAYG,MAAMC,cAAcC,WAEjDP,EAAQG,KACXH,EAAQG,GAAQ,IAGlBH,EAAQG,GAAMK,KAAKP,GAGrB,OAAOD,IACN,IAEH,OACE,kBAAC,IAAD,CAAYP,MAAOA,GAChBgB,OAAOC,QAAQZ,GACba,UACAC,KAAI,WAAiBC,GAAjB,IAAEV,EAAF,KAAQW,EAAR,YACH,kBAAC,IAAMC,SAAP,CAAgBC,IAAKH,GACnB,4BAAKV,GACL,4BACGW,EAAOF,KAAI,SAACK,EAAKC,GAAW,MACWC,IAAMC,oBAAoBH,GAAxDxB,EADmB,EACnBA,MAAO4B,EADY,EACZA,cAAeC,EADH,EACGA,IAE9B,OACE,wBAAIN,IAAKE,GACP,wBAAIK,UAAU,cACZ,kBAAC,IAAD,CAAMC,GAAIF,GACP7B,EADH,IACU,+BAAQ4B,gBAaxC7B,EAAciC,YAAc,gBAEbjC,O,oCCnEf,sFAaMkC,EAA6E,SAAC,GAA0B,IAAxB/B,EAAwB,EAAxBA,KAC5EgC,EADoG,EAAlBC,YAClFD,SAER,OAAO,kBAAC,IAAD,CAAelC,MAAK,aAAekC,EAAYhC,KAAMA,KAG9D+B,EAAsBD,YAAc,wBAE7B,IAAMI,EAAY,aAYVH,a,kCCjCf,qCASMI,EAAuD,SAAC,GAAD,IAAGrC,EAAH,EAAGA,MAAOsC,EAAV,EAAUA,SAAV,OAC3D,oCACE,kBAAC,IAAD,CAAMC,KAAK,OAAOvC,MAAOA,IAEzB,0BAAMwC,KAAK,OAAOC,GAAG,QACnB,6BAASX,UAAU,QACjB,4BAAQA,UAAU,eAChB,wBAAIA,UAAU,cAAc9B,IAG9B,yBAAK8B,UAAU,gBAAgBQ,OAMvCD,EAAWL,YAAc,aAEVK","file":"component---src-components-category-archive-layout-tsx-1f136b2e3d9e3ef727b2.js","sourcesContent":["import React from 'react';\n\nimport PageLayout from './pageLayout';\nimport Link from './link';\nimport { Utils, GraphQl } from '../utils';\n\ntype PostsGroupedByKey = {\n  [key: string]: GraphQl.PostMdxFragment[];\n};\n\ntype ArchiveLayoutProps = {\n  title: string;\n  data: GraphQl.ArchivePageQuery | GraphQl.CategoryArchiveLayoutQuery | GraphQl.TagArchiveLayoutQuery;\n  children?: never;\n};\n\nconst ArchiveLayout: React.FunctionComponent<ArchiveLayoutProps> = ({ title, data }) => {\n  const posts = data.allMdx.edges;\n\n  if (!posts) return null;\n\n  const postsGroupedByYear = posts.reduce<PostsGroupedByKey>((reduced, { node }) => {\n    const { frontmatter } = node;\n\n    if (frontmatter) {\n      const year = new Date(frontmatter.date).getFullYear().toString();\n\n      if (!reduced[year]) {\n        reduced[year] = [];\n      }\n\n      reduced[year].push(node);\n    }\n\n    return reduced;\n  }, {});\n\n  return (\n    <PageLayout title={title}>\n      {Object.entries(postsGroupedByYear)\n        .reverse()\n        .map(([year, posts2], index) => (\n          <React.Fragment key={index}>\n            <h2>{year}</h2>\n            <ul>\n              {posts2.map((mdx, index2) => {\n                const { title, dateFormatted, url } = Utils.SafeMetadataFromMdx(mdx);\n\n                return (\n                  <li key={index2}>\n                    <h3 className=\"post-entry\">\n                      <Link to={url}>\n                        {title} <small>{dateFormatted}</small>\n                      </Link>\n                    </h3>\n                  </li>\n                );\n              })}\n            </ul>\n          </React.Fragment>\n        ))}\n    </PageLayout>\n  );\n};\n\nArchiveLayout.displayName = 'ArchiveLayout';\n\nexport default ArchiveLayout;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport ArchiveLayout from './archiveLayout';\nimport { GraphQl } from '../utils';\n\ntype CategoryArchiveLayoutProps = {\n  data: GraphQl.CategoryArchiveLayoutQuery;\n  pageContext: {\n    category: string;\n  };\n};\n\nconst CategoryArchiveLayout: React.FunctionComponent<CategoryArchiveLayoutProps> = ({ data, pageContext }) => {\n  const { category } = pageContext;\n\n  return <ArchiveLayout title={`Category: ${category}`} data={data} />;\n};\n\nCategoryArchiveLayout.displayName = 'CategoryArchiveLayout';\n\nexport const pageQuery = graphql`\n  query CategoryArchiveLayout($category: String!) {\n    allMdx(filter: { fields: { slug: { ne: null } }, frontmatter: { categories: { eq: $category } } }, sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          ...PostMdx\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryArchiveLayout;\n","import React from 'react';\n\nimport Head from './head';\n\ntype PageLayoutProps = {\n  title: string;\n  children: React.ReactNode;\n};\n\nconst PageLayout: React.FunctionComponent<PageLayoutProps> = ({ title, children }) => (\n  <>\n    <Head type=\"page\" title={title} />\n\n    <main role=\"main\" id=\"main\">\n      <article className=\"page\">\n        <header className=\"page-header\">\n          <h1 className=\"page-title\">{title}</h1>\n        </header>\n\n        <div className=\"page-content\">{children}</div>\n      </article>\n    </main>\n  </>\n);\n\nPageLayout.displayName = 'PageLayout';\n\nexport default PageLayout;\n"],"sourceRoot":""}